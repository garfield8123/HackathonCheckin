from bottle import *
from datetime import datetime, timedelta
from werkzeug.utils import secure_filename
from UserInfo import *
from getInformation import getJsonInformation
from Encryption import *
import os

@route('/')
def home():
    #---- Shows login page with username and password----
    data = getJsonInformation()
    eventDate = datetime.now() - datetime.strptime(data.get("Date"), '%Y-%m-%d %H:%M:%S.%f')
    #---- If the eveqnt days is over 14 days past the event starting date all entries and files created will be removed from everywhere ----
    if eventDate.days >= 14:
        removeEntries()
    #---- Runs the html file in the directory HTML/index.tpl ----
    return template("HTML/index.tpl")


@route('/generateOrganizerPassword')
def generateOrganizerPassword():
    #---- Generate the password that will be used for Organizer ----
    #---- (NOTE: ONLY DO THIS ONCE) ----
    #---- Multiple passwords could work, but never tried it ----
    data = getJsonInformation()
    eventDate = datetime.now() - datetime.strptime(data.get("Date"), '%Y-%m-%d %H:%M:%S.%f')
    if eventDate.days <= 2:
        eventDate = datetime.strptime(data.get("Date"), '%Y-%m-%d %H:%M:%S.%f') - datetime.now()
        if eventDate.days <= 2 and eventDate.days >= 0:
            #---- Generates a random 10 digit passsword with special characteries, numbers, upper, and lower case letters ----
            password = ''.join(random.choice(string.punctuation + string.ascii_lowercase + string.digits + string.ascii_uppercase) for _ in range(10))
            #---- Generates a secure encrypted version of the password in its respect location ----
            generateRandomPasscode(password, "Organizer")
    #---- Will return back to the home page when finished ----
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@post('/Organizer')
def Organizer():
    #---- Grabs the username and password from the home/login page ----
    username = request.forms.get("Username")
    password = request.forms.get("Password")
    #---- Checks if the username and password is accurate to the current possible usernames and passwords ----
    if checkifuser(username, password):
        #---- Creates a random Session with 128 digits with special chracters, numbers, upper, and lower case letters ----
        sessionToken, sessionKey = generateSessionToken(username)
        #---- Creates a cookie with the encrypted SessionToken generated by the username at this time ----
        #---- (NOTE: COOKIE WILL EXPIRE 1 HOUR AFTER CREATION)
        response.set_cookie("OrganizerSession", sessionToken.decode('utf-8') + ":" + sessionKey.decode('utf-8'), expires=time.mktime((datetime.now() + timedelta(hours=1)).timetuple()))
        return '''<meta http-equiv="refresh" content="0; URL='./checkin'" />'''
    #---- Will proceed to checkin page if is Organizer, but otherwise will return to home/login page ----
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@route('/checkin')
def checkin():
    #---- Checks in an attendee with ID Number only ----
    info = getDict(True)
    #---- Checks if the OrganizerSession Token has been created as it can only be created if Organizer successfully logged in ----
    if request.get_cookie("OrganizerSession") is not None:
        #---- However if the OrganizerSession Token is created illegitimately it will manually decrpy the Encrypted SessionToken to verify if the contents can get back to Organizer text ---- 
        if decryption(str.encode(request.get_cookie("OrganizerSession").split(":")[0]), str.encode(request.get_cookie("OrganizerSession").split(":")[1])).split(":")[0] == "Organizer":
            return template("HTML/Checkin.tpl", info)
    #---- If above is true it will show the HTML file HTML/Checkin.tpl, but if the user is not Organizer they will be redirected to the home/login page ----
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@route('/checkinNoId')
def checkinNone():
    #---- Checks in an attendee with out ID Number ----
    #---- Generates boexes for first name, last name, and email to verify the attendee for checkin ----
    info = getDict(False)
    if request.get_cookie("OrganizerSession") is not None:
        if decryption(str.encode(request.get_cookie("OrganizerSession").split(":")[0]), str.encode(request.get_cookie("OrganizerSession").split(":")[1])).split(":")[0] == "Organizer":
            return template("HTML/Checkin.tpl", info)
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@post('/CheckedIn')
def checkedIn():
    #---- Grabs the first name, last name, email, and ID Number for checkin ----
    firstName = request.forms.get("firstName")
    lastName = request.forms.get("lastName")
    Email = request.forms.get("email")
    IDNumber = request.forms.get("ID")
    if firstName is None or lastName is None or Email is None:
        #---- Verifys if the firs name is filled out as then the checkin will have to check the first name, last name, and email for the attendee ----
        if checkAttendee(IDNumber):
            return '''<meta http-equiv="refresh" content="0; URL='./ViewAttendee'" />'''
        else:
            return '''<meta http-equiv="refresh" content="0; URL='./checkin'" />'''
    else:
        #---- Verifies if the ID Number is an attendee for the event ----
        if checkAttendeeFirstName(firstName, lastName, Email):
            return '''<meta http-equiv="refresh" content="0; URL='./ViewAttendee'" />'''
        else:
            return '''<meta http-equiv="refresh" content="0; URL='./checkinNoId'" />'''

@route('/upload')
def upload():
    #---- Allows to Organizer to upload Excel or CSV with Attendee Information ----
    if request.get_cookie("OrganizerSession") is not None:
        if decryption(str.encode(request.get_cookie("OrganizerSession").split(":")[0]), str.encode(request.get_cookie("OrganizerSession").split(":")[1])).split(":")[0] == "Organizer":
            return template("HTML/upload.tpl")
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@post('/uploaded')
def uploadFile():
    #---- Will grab the filename and save the filename in a scure manner by removing all folder calls to eliminate possible exploits ----
    file = request.files.fileupload
    filename = secure_filename(file.filename)
    #---- Checks if it is Excel or CSV file and saves the file ----
    if ("xlsx" in filename) or ("csv" in filename):
        file.save(filename)
        #---- Encrypts all information used and generates an Encrypted version of the file, which can overwrite orginal ----
        #---- (NOTE: First name, last name, and Email are saved and are all encrypted)
        useAttendeeInformation()
        return  '''<meta http-equiv="refresh" content="0; URL='./ViewAttendee'" />'''
    return  '''<meta http-equiv="refresh" content="0; URL='./upload'" />'''
    
@route('/checkout')
def checkOut():
    #---- Check out an attendee with an ID Number ----
    info = getDict(True)
    if request.get_cookie("OrganizerSession") is not None:
        if decryption(str.encode(request.get_cookie("OrganizerSession").split(":")[0]), str.encode(request.get_cookie("OrganizerSession").split(":")[1])).split(":")[0] == "Organizer":
            return template("HTML/Checkout.tpl", info)
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@route('/checkoutNoId')
def checkOutNone():
    #---- Checks out an attendee without an ID Number ----
    info = getDict(False)
    if request.get_cookie("OrganizerSession") is not None:
        if decryption(str.encode(request.get_cookie("OrganizerSession").split(":")[0]), str.encode(request.get_cookie("OrganizerSession").split(":")[1])).split(":")[0] == "Organizer":
            return template("HTML/Checkout.tpl", info)
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@post('/CheckedOut')
def checkedIn():
    #---- Grabs all information for the attendee to check out and determines to check out with ID Number or not ----
    firstName = request.forms.get("firstName")
    lastName = request.forms.get("lastName")
    Email = request.forms.get("email")
    IDNumber = request.forms.get("ID")
    if firstName is None or lastName is None or Email is None:
        if checkoutAttendee(IDNumber):
            return '''<meta http-equiv="refresh" content="0; URL='./ViewAttendee'" />'''
        else:
            return '''<meta http-equiv="refresh" content="0; URL='./checkout'" />'''
    else:
        if checkoutAttendeeFirstName(firstName, lastName, Email):
            return '''<meta http-equiv="refresh" content="0; URL='./ViewAttendee'" />'''
        else:
            return '''<meta http-equiv="refresh" content="0; URL='./checkoutNoId'" />'''

@route('/ViewAttendee')
def showAttendeeList():
    #---- Shows a table with all attendee information unencrypted and shows whetehr the person is checked in or not ----
    if request.get_cookie("OrganizerSession") is not None:
        if decryption(str.encode(request.get_cookie("OrganizerSession").split(":")[0]), str.encode(request.get_cookie("OrganizerSession").split(":")[1])).split(":")[0] == "Organizer":
            return template("HTML/Attendee.tpl", viewAttendeeList())
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@route('/qrcode/<IDNumber>')
def IDNumber(IDNumber):
    #---- For the qrcode that will automatically check the person in when scanned by an Organizer logged into the site ----
    if request.get_cookie("OrganizerSession") is not None:
        if decryption(str.encode(request.get_cookie("OrganizerSession").split(":")[0]), str.encode(request.get_cookie("OrganizerSession").split(":")[1])).split(":")[0] == "Organizer":
            if checkAttendee(IDNumber):
                return '''<meta http-equiv="refresh" content="0; URL='./ViewAttendee'" />'''
            if checkoutAttendee(IDNumber):
                return '''<meta http-equiv="refresh" content="0; URL='./ViewAttendee'" />'''

    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

def getDict(ID):
    #---- Creates the HTML Form data for check in and check out with ID Number or no ID Number ----
    if request.get_cookie("OrganizerSession") is None:
        return '''<meta http-equiv="refresh" content="0; URL='./'" />''' 
    else:
        if ID:
            info = {"checkInInfo":'''<label>ID Number</label><br>
            <input type = "text" name="ID" class="form-control" placeholder = "ID" required><br>
            <input id="login" class="button" type="submit" value="Check In" placeholder="Submit">''',
            "checkOutInfo":'''<label>ID Number</label><br>
            <input type = "text" name="ID" class="form-control" placeholder = "ID" required><br>
            <input id="login" class="button" type="submit" value="Check Out" placeholder="Submit">'''}
        else:
            info = {"checkInInfo":'''<label>First Name</label><br>
                <input type="text" name="firstName" id="firstName" class="form-control" placeholder="First Name" required><br>
                <label>Last Name</label><br>
                <input type="text" name="lastName" id="lastName" class="form-control" placeholder="Last Name" required><br>
                <label>Email</label><br>
                <input type="text" name="email" id ="email" class="form-control" placeholder="Email" required><br>
                <input id="login" class="button" type="submit" value="Check In" placeholder="Submit">''',
            "checkOutInfo":'''<label>First Name</label><br>
                <input type="text" name="firstName" id="firstName" class="form-control" placeholder="First Name" required><br>
                <label>Last Name</label><br>
                <input type="text" name="lastName" id="lastName" class="form-control" placeholder="Last Name" required><br>
                <label>Email</label><br>
                <input type="text" name="email" id ="email" class="form-control" placeholder="Email" required><br>
                <input id="login" class="button" type="submit" value="Check Out" placeholder="Submit">'''}
    return info

@route('/HTML/<filename>')
def server_HTML(filename):
    #---- Returns the static file for all HTML files used ----
    return static_file(filename, root=os.path.abspath('HTML'))

@route('/images/<filename>')
def server_Images(filename):
    #---- RReturns the static file for all Images used ----
    return static_file(filename, root=os.path.abspath('Images'))

@route('/Scripts/<filename>')
def server_Scripts(filename):
    #---- Returns the static file for all Scripts used ----
    return static_file(filename, root=os.path.abspath('Scripts'))

data = getJsonInformation()
#---- Top one is for heroku or cloud based hosting ----
run(host=data.get("webserver")[0:data.get("webserver").find(":")], port=os.environ.get('PORT', 5000), debug=True) 
#---- Use the below if you have a specific port you would like to run it instead of 5000 ----
#run(host=data.get("webserver")[0:data.get("webserver").find(":")], port=data.get("webserver")[data.get("webserver").find(":")+1: len(data.get("webserver"))], debug=True)
